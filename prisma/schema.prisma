generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String?   @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  username  String    @unique
  accounts  Account[]
  sessions  Session[]
  posts     Post[] // ✅ Relation: User → Posts
  comments  Comment[] // ✅ Relation: User → Comments
  followers Follow[]  @relation("followers") // ✅ Follow relation
  following Follow[]  @relation("following") // ✅ Follow relation

  conversations Conversation[] @relation("UserConversations")
  sentMessages  Message[]      @relation("UserSentMessages")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[] // ✅ Relation: Post → Comments

  @@index([userId])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "followers")
  following User @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "following")

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String? // ✅ Optional: Image support for comments
  voiceUrl  String? // ✅ Optional: Voice memo support
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("UserConversations")
  messages     Message[]
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation("UserSentMessages", fields: [senderId], references: [id])
  senderId       String
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
}
